name: Build, Tag, and Release with Artifact

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore TP2_14E_A24-main/Automate.csproj

    - name: Build
      run: dotnet build TP2_14E_A24-main/Automate.csproj --configuration Release --no-restore

    - name: Publish
      run: dotnet publish TP2_14E_A24-main/Automate.csproj --configuration Release --output ./publish /p:PublishSingleFile=true /p:SelfContained=true

    - name: List publish directory
      run: Get-ChildItem -Path ./publish

    - name: Zip publish directory
      run: Compress-Archive -Path ./publish/* -DestinationPath ./publish/TP3-Automate.zip

    - name: Get latest tag
      id: get_latest_tag
      shell: pwsh
      run: |
        git fetch --tags
        $tags = git tag
        if (-not [string]::IsNullOrWhiteSpace($tags)) {
          $LATEST_TAG = git describe --tags --abbrev=0
        } else {
          $LATEST_TAG = "TP3-V0"
        }
        echo "LATEST_TAG=$LATEST_TAG" >> $env:GITHUB_ENV
        Write-Host "Derniere tag: $LATEST_TAG"

    - name: Determine next version
      id: determine_version
      shell: pwsh
      run: |
        git fetch --tags
        $tags = git tag -l
        $LATEST_TAG = $tags | Where-Object {$_ -match "TP3-V\d+"} | Sort-Object | Select-Object -Last 1
        if ($LATEST_TAG -eq $null) {
          $NEW_TAG = "TP3-V1"
        } else {
          $LATEST_NUMBER = $LATEST_TAG -replace 'TP3-V', ''
          $NEXT_NUMBER = [int]$LATEST_NUMBER + 1
          $NEW_TAG = "TP3-V$NEXT_NUMBER"
        }
        echo "NEW_TAG=$NEW_TAG" >> $env:GITHUB_ENV
        Write-Host "New version: $NEW_TAG"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        body: |
          Release notes for ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish/TP3-Automate.zip
        asset_name: TP3-Automate.zip
        asset_content_type: application/zip

  failure-handler:
      if: failure() # Execute only if last job failed
      needs: build
      runs-on: ubuntu-latest
      steps:
      - name: Create GitHub Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = "ðŸš¨ Release Ã©chouÃ©";
            const body = `Ã‰chec de build pour la release dans le repo **${context.repo.owner}/${context.repo.repo}**.
            
            **Branch:** \`${context.ref}\`
            **Commit:** \`${context.sha}\`
  
            [ðŸ”— Cliquez ici pour accÃ©der les logs de GitHub Actions](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})  
  
            Regardez les logs pour trouver et corriger le problÃ¨me.`;
  
            const labels = ["build", "error"];
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels
            });
            console.log(`Issue crÃ©e: ${issue.data.html_url}`);
